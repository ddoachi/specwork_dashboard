#!/bin/bash
# Generated from: [Database Mount Integration](../../1012.md)
# Context: [Implementation Context](../../1012.context.md)
# Created: 2025-08-27
# Purpose: Create system users for database services with secure configuration

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
}

# Create a system user with secure settings
create_system_user() {
    local username=$1
    local home_dir=$2
    local description=$3
    
    log_info "Creating system user: $username"
    
    # Check if user already exists
    if id "$username" &>/dev/null; then
        log_warning "User $username already exists, skipping creation"
        return 0
    fi
    
    # Create system user with nologin shell
    if useradd -r -s /bin/false -d "$home_dir" -M -c "$description" "$username"; then
        log_success "Created system user: $username"
        
        # Lock the account (disable password authentication)
        passwd -l "$username" 2>/dev/null || true
        
        # Set account to never expire
        chage -E -1 -M -1 "$username" 2>/dev/null || true
        
        return 0
    else
        log_error "Failed to create user: $username"
        return 1
    fi
}

# Create operational groups
create_operational_groups() {
    local groups=("docker" "backup" "db-backup" "db-monitor" "db-admin")
    
    log_info "Creating operational groups..."
    
    for group in "${groups[@]}"; do
        if getent group "$group" &>/dev/null; then
            log_warning "Group $group already exists, skipping"
        else
            if groupadd "$group"; then
                log_success "Created group: $group"
            else
                log_error "Failed to create group: $group"
            fi
        fi
    done
}

# Verify user creation
verify_user() {
    local username=$1
    local expected_home=$2
    
    log_info "Verifying user: $username"
    
    # Check if user exists
    if ! id "$username" &>/dev/null; then
        log_error "User $username does not exist"
        return 1
    fi
    
    # Get user info
    local uid=$(id -u "$username")
    local shell=$(getent passwd "$username" | cut -d: -f7)
    local home=$(getent passwd "$username" | cut -d: -f6)
    
    # Verify system user (UID < 1000 typically for system users)
    if [[ $uid -ge 1000 ]]; then
        log_warning "User $username has UID $uid (not a system user)"
    fi
    
    # Verify nologin shell
    if [[ "$shell" != "/bin/false" && "$shell" != "/usr/sbin/nologin" ]]; then
        log_warning "User $username has shell $shell (not nologin)"
    fi
    
    # Verify home directory
    if [[ "$home" != "$expected_home" ]]; then
        log_warning "User $username has home $home (expected $expected_home)"
    fi
    
    # Check if account is locked
    if passwd -S "$username" 2>/dev/null | grep -q "L"; then
        log_success "User $username is properly locked"
    else
        log_warning "User $username is not locked"
    fi
    
    log_success "User $username verified"
    return 0
}

# Set resource limits for database users
set_resource_limits() {
    local limits_file="/etc/security/limits.d/90-database-users.conf"
    
    log_info "Setting resource limits for database users..."
    
    cat > "$limits_file" << 'EOF'
# Resource limits for database service users
# Generated by setup-database-users.sh

# PostgreSQL limits
postgres soft nofile 65536
postgres hard nofile 65536
postgres soft nproc 4096
postgres hard nproc 4096

# ClickHouse limits
clickhouse soft nofile 32768
clickhouse hard nofile 32768
clickhouse soft nproc 4096
clickhouse hard nproc 4096

# Kafka limits
kafka soft nofile 100000
kafka hard nofile 100000
kafka soft nproc 8192
kafka hard nproc 8192

# MongoDB limits
mongodb soft nofile 64000
mongodb hard nofile 64000
mongodb soft nproc 4096
mongodb hard nproc 4096

# Redis limits
redis soft nofile 65536
redis hard nofile 65536
redis soft nproc 4096
redis hard nproc 4096
EOF
    
    if [[ -f "$limits_file" ]]; then
        log_success "Resource limits configured in $limits_file"
    else
        log_error "Failed to create resource limits file"
        return 1
    fi
}

# Main function
main() {
    log_info "=== Database Service User Setup Script ==="
    log_info "Starting at $(date)"
    
    # Check prerequisites
    check_root
    
    # Create operational groups first
    create_operational_groups
    
    # Define database users to create
    declare -A database_users=(
        ["postgres"]="/var/lib/postgresql:PostgreSQL database server"
        ["clickhouse"]="/var/lib/clickhouse:ClickHouse analytics database"
        ["kafka"]="/var/lib/kafka:Apache Kafka message broker"
        ["mongodb"]="/var/lib/mongodb:MongoDB document database"
        ["redis"]="/var/lib/redis:Redis in-memory database"
    )
    
    # Create each database user
    local failed_users=()
    for username in "${!database_users[@]}"; do
        IFS=':' read -r home_dir description <<< "${database_users[$username]}"
        if ! create_system_user "$username" "$home_dir" "$description"; then
            failed_users+=("$username")
        fi
    done
    
    # Verify all users
    log_info "=== Verifying all database users ==="
    for username in "${!database_users[@]}"; do
        IFS=':' read -r home_dir description <<< "${database_users[$username]}"
        verify_user "$username" "$home_dir"
    done
    
    # Set resource limits
    set_resource_limits
    
    # Summary
    log_info "=== Setup Summary ==="
    
    if [[ ${#failed_users[@]} -eq 0 ]]; then
        log_success "All database users created successfully!"
        
        # Display user information
        log_info "Created users:"
        for username in "${!database_users[@]}"; do
            local uid=$(id -u "$username" 2>/dev/null || echo "N/A")
            local gid=$(id -g "$username" 2>/dev/null || echo "N/A")
            echo "  - $username (UID: $uid, GID: $gid)"
        done
        
        # Display group information
        log_info "Available operational groups:"
        for group in docker backup db-backup db-monitor db-admin; do
            if getent group "$group" &>/dev/null; then
                local gid=$(getent group "$group" | cut -d: -f3)
                echo "  - $group (GID: $gid)"
            fi
        done
        
        # Log to system log
        logger -t "jts-setup" "Database service users created successfully"
        
        exit 0
    else
        log_error "Failed to create users: ${failed_users[*]}"
        exit 1
    fi
}

# Run main function
main "$@"